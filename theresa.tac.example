# -*- python -*-
# Copyright (c) Aaron Gallagher <_@habnab.it>
# See COPYING for details.

import theresa
import twatter

from twisted.application import internet, service
from twisted.web.client import Agent, HTTPConnectionPool
from twisted.internet import reactor
from twisted.python import log
from oauth import oauth

consumer = oauth.OAuthConsumer('...', '...')
token = oauth.OAuthToken('...', '...')

class Theresa(theresa.TheresaProtocol):
    nickname = 'theresa'
    channel = '#theresa-test'

    def streamDelegate(self, data):
        if 'text' not in data:
            return
        self.twatDelegate(self.channels)(data)

    def signedOn(self):
        theresa.TheresaProtocol.signedOn(self)
        self.streamDone = self.factory.twatter.stream('user.json', self.streamDelegate).addErrback(log.err)

    def connectionLost(self, reason):
        self.streamDone.cancel()

class TheresaFactory(theresa.TheresaFactory):
    protocol = Theresa

application = service.Application("theresa")
pool = HTTPConnectionPool(reactor)
agent = Agent(reactor, pool=pool)
twatterInstance = twatter.Twatter(twatter.OAuthAgent(agent, consumer, token))
theresaFac = TheresaFactory(agent, twatterInstance)
internet.TCPClient('irc.esper.net', 5555, theresaFac).setServiceParent(application)
